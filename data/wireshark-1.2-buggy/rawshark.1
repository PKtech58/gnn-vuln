.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RAWSHARK 1"
.TH RAWSHARK 1 "2018-10-12" "1.2.0" "The Wireshark Network Analyzer"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
rawshark \- Dump and analyze raw libpcap data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBrawshark\fR
[\ \fB\-d\fR\ <encap:dlt>|<proto:protoname>\ ]
[\ \fB\-F\fR\ <field\ to\ display>\ ]
[\ \fB\-h\fR\ ]
[\ \fB\-l\fR\ ]
[\ \fB\-n\fR\ ]
[\ \fB\-N\fR\ <name\ resolving\ flags>\ ]
[\ \fB\-o\fR\ <preference\ setting>\ ]\ ...
[\ \fB\-r\fR\ <infile\ or\ pipe>\ ]
[\ \fB\-R\fR\ <read\ (display)\ filter>\ ]
[\ \fB\-s\fR\ ]
[\ \fB\-S\fR\ <field\ format>\ ]
[\ \fB\-t\fR\ ad|a|r|d|e\ ]
[\ \fB\-v\fR\ ]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBRawshark\fR reads a stream of packets from a file or pipe, and prints a line
describing its output, followed by a set of matching fields for each packet
on stdout.
.SH "INPUT"
.IX Header "INPUT"
Unlike \fBTShark\fR, \fBRawshark\fR makes no assumptions about encapsulation or
input. The \fB\-d\fR and \fB\-r\fR flags must be specified in order for it to run.
One or more \fB\-F\fR flags should be specified in order for the output to be
useful. The other flags listed above follow the same conventions as
\&\fBWireshark\fR and \fBTShark\fR.
.PP
\&\fBRawshark\fR expects input records with the following format. Note that this
matches the pcap_pkthdr struct and packet data used in libpcap.
.PP
.Vb 7
\&    struct rawshark_rec_s {
\&        uint32_t ts_sec;      /* Time stamp (seconds) */
\&        uint32_t ts_usec;     /* Time stamp (microseconds) */
\&        uint32_t caplen;      /* Length of the packet buffer */
\&        uint32_t len;         /* "On the wire" length of the packet */
\&        uint8_t data[caplen]; /* Packet data */
\&    };
.Ve
.SH "OUTPUT"
.IX Header "OUTPUT"
If one or more fields are specified via the \fB\-F\fR flag, \fBRawshark\fR prints
the number, field type, and display format for each field on the first line
as \*(L"packet number\*(R" 0. For each record, the packet number, matching fields,
and a \*(L"1\*(R" or \*(L"0\*(R" are printed to indicate if the field matched any supplied
display filter. A \*(L"\-\*(R" is used to signal the end of a field description and
at the end of each packet line. For example, the flags \fB\-F ip.src \-F
dns.qry.type\fR might generate the following output:
.PP
.Vb 5
\&    0 FT_IPv4 BASE_NONE \- 1 FT_UINT16 BASE_HEX \-
\&    1 1="1" 0="192.168.77.10" 1 \-
\&    2 1="1" 0="192.168.77.250" 1 \-
\&    3 0="192.168.77.10" 1 \-
\&    4 0="74.125.19.104" 1 \-
.Ve
.PP
Note that packets 1 and 2 are \s-1DNS\s0 queries, and 3 and 4 are not. Adding \fB\-R \*(L"not dns\*(R"\fR still prints each line, but there's an indication
that packets 1 and 2 didn't pass the filter:
.PP
.Vb 5
\&    0 FT_IPv4 BASE_NONE \- 1 FT_UINT16 BASE_HEX \-
\&    1 1="1" 0="192.168.77.10" 0 \-
\&    2 1="1" 0="192.168.77.250" 0 \-
\&    3 0="192.168.77.10" 1 \-
\&    4 0="74.125.19.104" 1 \-
.Ve
.PP
Also note that the output may be in any order, and that multiple matching
fields might be displayed.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-d  <encapsulation>" 4
.IX Item "-d <encapsulation>"
Specify how the packet data should be dissected. The encapsulation is of the
form \fItype\fR\fB:\fR\fIvalue\fR, where \fItype\fR is one of:
.Sp
\&\fBencap\fR:\fIname\fR Packet data should be dissected using the libpcap data
link type \fIname\fR, e.g. \fBencap:EN10MB\fR for Ethernet.
.Sp
\&\fBencap\fR:\fIname\fR Packet data should be dissected using the libpcap data link
type (\s-1DLT\s0) \fIname\fR, e.g. \fBencap:EN10MB\fR for Ethernet. Names are converted
using \fIpcap_datalink_name_to_val()\fR.
.Sp
\&\fBencap\fR:\fInumber\fR Packet data should be dissected using the libpcap \s-1DLT
\&\s0\fInumber\fR, e.g. \fBencap:105\fR for raw \s-1IEEE 802.11. A\s0 complete list of DLTs
can be found in pcap\-bpf.h in the libpcap sources.
.Sp
\&\fBproto\fR:\fIprotocol\fR Packet data should be passed to the specified Wireshark
protocol dissector, e.g. \fBproto:http\fR for \s-1HTTP\s0 data.
.IP "\-F  <field to display>" 4
.IX Item "-F <field to display>"
Add the matching field to the output. Fields are any valid display filter
field. More than one \fB\-F\fR flag may be specified, and each field can match
multiple times in a given packet. A single field may be specified per \fB\-F\fR
flag. If you want to apply a display filter, use the \fB\-R\fR flag.
.IP "\-h" 4
.IX Item "-h"
Print the version and options and exits.
.IP "\-l" 4
.IX Item "-l"
Flush the standard output after the information for each packet is
printed.  (This is not, strictly speaking, line-buffered if \fB\-V\fR
was specified; however, it is the same as line-buffered if \fB\-V\fR wasn't
specified, as only one line is printed for each packet, and, as \fB\-l\fR is
normally used when piping a live capture to a program or script, so that
output for a packet shows up as soon as the packet is seen and
dissected, it should work just as well as true line-buffering.  We do
this as a workaround for a deficiency in the Microsoft Visual \*(C+ C
library.)
.Sp
This may be useful when piping the output of \fBTShark\fR to another
program, as it means that the program to which the output is piped will
see the dissected data for a packet as soon as \fBTShark\fR sees the
packet and generates that output, rather than seeing it only when the
standard output buffer containing that data fills up.
.IP "\-n" 4
.IX Item "-n"
Disable network object name resolution (such as hostname, \s-1TCP\s0 and \s-1UDP\s0 port
names), the \fB\-N\fR flag might override this one.
.IP "\-N  <name resolving flags>" 4
.IX Item "-N <name resolving flags>"
Turn on name resolving only for particular types of addresses and port
numbers, with name resolving for other types of addresses and port
numbers turned off. This flag overrides \fB\-n\fR if both \fB\-N\fR and \fB\-n\fR are
present. If both \fB\-N\fR and \fB\-n\fR flags are not present, all name resolutions are
turned on.
.Sp
The argument is a string that may contain the letters:
.Sp
\&\fBm\fR to enable \s-1MAC\s0 address resolution
.Sp
\&\fBn\fR to enable network address resolution
.Sp
\&\fBt\fR to enable transport-layer port number resolution
.Sp
\&\fBC\fR to enable concurrent (asynchronous) \s-1DNS\s0 lookups
.IP "\-o  <preference>:<value>" 4
.IX Item "-o <preference>:<value>"
Set a preference value, overriding the default value and any value read
from a preference file.  The argument to the option is a string of the
form \fIprefname\fR\fB:\fR\fIvalue\fR, where \fIprefname\fR is the name of the
preference (which is the same name that would appear in the preference
file), and \fIvalue\fR is the value to which it should be set.
.IP "\-r  <input file or pipe>" 4
.IX Item "-r <input file or pipe>"
Read packet data from \fIinput source\fR. It can be a regular file or pipe,
and must be have the record format specified above.
.IP "\-R  <read (display) filter>" 4
.IX Item "-R <read (display) filter>"
Cause the specified filter (which uses the syntax of read/display filters,
rather than that of capture filters) to be applied before printing the output.
.IP "\-s" 4
.IX Item "-s"
Allows standard pcap files to be used as input, by skipping over the 24
byte pcap file header.
.IP "\-S" 4
.IX Item "-S"
Use the specified format string to print each field. The following formats
are supported:
.RS 4
.Sp
.RS 4
\&\fB\f(CB%D\fB\fR Field name or description, e.g. \*(L"Type\*(R" for dns.qry.type
.Sp
\&\fB\f(CB%N\fB\fR Base 10 numeric value of the field.
.Sp
\&\fB\f(CB%S\fB\fR String value of the field.
.RE
.RE
.RS 4
.Sp
For something similar to Wireshark's standard display (\*(L"Type: A (1)\*(R") you
could use \fB\f(CB%D:\fB \f(CB%S\fB (%N)\fR.
.RE
.IP "\-t  ad|a|r|d|e" 4
.IX Item "-t ad|a|r|d|e"
Set the format of the packet timestamp printed in summary lines, the default
is relative. The format can be one of:
.Sp
\&\fBad\fR absolute with date: The absolute date and time is the actual time and
date the packet was captured
.Sp
\&\fBa\fR absolute: The absolute time is the actual time the packet was captured,
with no date displayed
.Sp
\&\fBr\fR relative: The relative time is the time elapsed between the first packet
and the current packet
.Sp
\&\fBd\fR delta: The delta time is the time since the previous packet was
captured
.Sp
\&\fBe\fR epoch: The time in seconds since epoch (Jan 1, 1970 00:00:00)
.IP "\-v" 4
.IX Item "-v"
Print the version and exit.
.SH "READ FILTER SYNTAX"
.IX Header "READ FILTER SYNTAX"
For a complete table of protocol and protocol fields that are filterable
in \fBTShark\fR see the \fIwireshark\-filter\fR\|(4) manual page.
.SH "FILES"
.IX Header "FILES"
These files contains various \fBWireshark\fR configuration values.
.IP "Preferences" 4
.IX Item "Preferences"
The \fIpreferences\fR files contain global (system-wide) and personal
preference settings. If the system-wide preference file exists, it is
read first, overriding the default settings. If the personal preferences
file exists, it is read next, overriding any previous values. Note: If
the command line option \fB\-o\fR is used (possibly more than once), it will
in turn override values from the preferences files.
.Sp
The preferences settings are in the form \fIprefname\fR\fB:\fR\fIvalue\fR,
one per line,
where \fIprefname\fR is the name of the preference
and \fIvalue\fR is the value to
which it should be set; white space is allowed between \fB:\fR and
\&\fIvalue\fR.  A preference setting can be continued on subsequent lines by
indenting the continuation lines with white space.  A \fB#\fR character
starts a comment that runs to the end of the line:
.Sp
.Vb 3
\&  # Capture in promiscuous mode?
\&  # TRUE or FALSE (case\-insensitive).
\&  capture.prom_mode: TRUE
.Ve
.Sp
The global preferences file is looked for in the \fIwireshark\fR directory
under the \fIshare\fR subdirectory of the main installation directory (for
example, \fI/usr/local/share/wireshark/preferences\fR) on UNIX-compatible
systems, and in the main installation directory (for example,
\&\fIC:\eProgram Files\eWireshark\epreferences\fR) on Windows systems.
.Sp
The personal preferences file is looked for in
\&\fI\f(CI$HOME\fI/.wireshark/preferences\fR on
UNIX-compatible systems and \fI\f(CI%APPDATA\fI%\eWireshark\epreferences\fR (or, if
\&\f(CW%APPDATA\fR% isn't defined, \fI\f(CI%USERPROFILE\fI%\eApplication
Data\eWireshark\epreferences\fR) on Windows systems.
.IP "Disabled (Enabled) Protocols" 4
.IX Item "Disabled (Enabled) Protocols"
The \fIdisabled_protos\fR files contain system-wide and personal lists of
protocols that have been disabled, so that their dissectors are never
called.  The files contain protocol names, one per line, where the
protocol name is the same name that would be used in a display filter
for the protocol:
.Sp
.Vb 2
\&  http
\&  tcp     # a comment
.Ve
.Sp
The global \fIdisabled_protos\fR file uses the same directory as the global
preferences file.
.Sp
The personal \fIdisabled_protos\fR file uses the same directory as the
personal preferences file.
.IP "Name Resolution (hosts)" 4
.IX Item "Name Resolution (hosts)"
If the personal \fIhosts\fR file exists, it is
used to resolve IPv4 and IPv6 addresses before any other
attempts are made to resolve them.  The file has the standard \fIhosts\fR
file syntax; each line contains one \s-1IP\s0 address and name, separated by
whitespace. The same directory as for the personal preferences file is
used.
.IP "Name Resolution (ethers)" 4
.IX Item "Name Resolution (ethers)"
The \fIethers\fR files are consulted to correlate 6\-byte hardware addresses to
names. First the personal \fIethers\fR file is tried and if an address is not
found there the global \fIethers\fR file is tried next.
.Sp
Each line contains one hardware address and name, separated by
whitespace.  The digits of the hardware address are separated by colons
(:), dashes (\-) or periods (.).  The same separator character must be
used consistently in an address. The following three lines are valid
lines of an \fIethers\fR file:
.Sp
.Vb 3
\&  ff:ff:ff:ff:ff:ff          Broadcast
\&  c0\-00\-ff\-ff\-ff\-ff          TR_broadcast
\&  00.00.00.00.00.00          Zero_broadcast
.Ve
.Sp
The global \fIethers\fR file is looked for in the \fI/etc\fR directory on
UNIX-compatible systems, and in the main installation directory (for
example, \fIC:\eProgram Files\eWireshark\fR) on Windows systems.
.Sp
The personal \fIethers\fR file is looked for in the same directory as the personal
preferences file.
.IP "Name Resolution (manuf)" 4
.IX Item "Name Resolution (manuf)"
The \fImanuf\fR file is used to match the 3\-byte vendor portion of a 6\-byte
hardware address with the manufacturer's name; it can also contain well-known
\&\s-1MAC\s0 addresses and address ranges specified with a netmask.  The format of the
file is the same as the \fIethers\fR files, except that entries of the form:
.Sp
.Vb 1
\&  00:00:0C      Cisco
.Ve
.Sp
can be provided, with the 3\-byte \s-1OUI\s0 and the name for a vendor, and
entries such as:
.Sp
.Vb 1
\&  00\-00\-0C\-07\-AC/40     All\-HSRP\-routers
.Ve
.Sp
can be specified, with a \s-1MAC\s0 address and a mask indicating how many bits
of the address must match. The above entry, for example, has 40
significant bits, or 5 bytes, and would match addresses from
00\-00\-0C\-07\-AC\-00 through 00\-00\-0C\-07\-AC\-FF. The mask need not be a
multiple of 8.
.Sp
The \fImanuf\fR file is looked for in the same directory as the global
preferences file.
.IP "Name Resolution (ipxnets)" 4
.IX Item "Name Resolution (ipxnets)"
The \fIipxnets\fR files are used to correlate 4\-byte \s-1IPX\s0 network numbers to
names. First the global \fIipxnets\fR file is tried and if that address is not
found there the personal one is tried next.
.Sp
The format is the same as the \fIethers\fR
file, except that each address is four bytes instead of six.
Additionally, the address can be represented as a single hexadecimal
number, as is more common in the \s-1IPX\s0 world, rather than four hex octets.
For example, these four lines are valid lines of an \fIipxnets\fR file:
.Sp
.Vb 4
\&  C0.A8.2C.00              HR
\&  c0\-a8\-1c\-00              CEO
\&  00:00:BE:EF              IT_Server1
\&  110f                     FileServer3
.Ve
.Sp
The global \fIipxnets\fR file is looked for in the \fI/etc\fR directory on
UNIX-compatible systems, and in the main installation directory (for
example, \fIC:\eProgram Files\eWireshark\fR) on Windows systems.
.Sp
The personal \fIipxnets\fR file is looked for in the same directory as the
personal preferences file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIwireshark\-filter\fR\|(4), \fIwireshark\fR\|(1), \fItshark\fR\|(1), \fIeditcap\fR\|(1), \fItcpdump\fR\|(8),
\&\fIpcap\fR\|(3), \fIdumpcap\fR\|(1), \fItext2pcap\fR\|(1)
.SH "NOTES"
.IX Header "NOTES"
\&\fBRawshark\fR is part of the \fBWireshark\fR distribution. The latest version of
\&\fBWireshark\fR can be found at <http://www.wireshark.org>.
.PP
\&\s-1HTML\s0 versions of the Wireshark project man pages are available at:
<http://www.wireshark.org/docs/man\-pages>.
.SH "AUTHORS"
.IX Header "AUTHORS"
\&\fBRawshark\fR uses the same packet dissection code that \fBWireshark\fR does, as
well as using many other modules from \fBWireshark\fR; see the list of authors
in the \fBWireshark\fR man page for a list of authors of that code.
